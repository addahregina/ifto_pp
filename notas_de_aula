AULA 14 AGO

69/m√™s 799 √† vista
359/m√™s 3.999 √† vista

22,26
27,5%


O que estiver em amarelo nos diagramas, s√£o de implementa√ß√£o obrigat√≥ria
M√©todo em it√°lico - abstrato
Na interface todos os m√©todos s√£o abstratos por padr√£o
No stategy interfaces s√£o comportamentos

Seta cont√≠nua - Implementada dentro da classe, atributo na origem;
seta dupla: na origem tem atributo da classe de destino e vice-versa

seta pontilhada - depend√™ncia n√£o possui atributo da classe de destino
implementa√ß√£o da interface, n√£o h√° heran√ßa
nota√ß√µes UML
+ p√∫blico
- privado
# protegido

//exemplo LSP(Liskov Substitution Principle)
meuMetodo(Veiculo v){
  v.ligar();
}

interface Veiculo{
  ligar();
}

class Carro extends Veiculo{
  ligar(){
    ligarMOtor();
    ligarFarois();
  }
  ligarMoto(){}
  ligarFarois(){}
}

//-----------------------------

imprimir(List<Cliente> lista){
 lista.remove(0);
 lista.forEach(c->print(c))
}

imprimir(Collection<Cliente> lista){
 lista.remove(0);
 lista.forEach(c->print(c))
}

List x Collection (n√£o possuem metodos que alteram a lista)

//----------------------------------------

Exemplo Boletos


A classe estrategista n√£o herda 

SOLID
SRP Princ√≠pio da responsabilidade √∫nica
OCP Princ√≠pio aberto e fechado
LSP (Liskov)
- substitui√ß√£o de tipos n√£o impacta o sistema
- tipo collection n√£o possui m√©todos remove e add, apenas consulta
ISP - Princ√≠pio de segrega√ß√£o da interface
DIP - Princ√≠pio da invers√£o de depend√™ncia (invers√£o vs inje√ß√£o)


//aula 13/fev
#2 ‚ôüComportamental: Padr√£o Strategy üåí 09/02 ‚òÄÔ∏è 14/02
Classe concreta √© obrigada a utilizar todos os m√©todos, a classe abstrata n√£o.

IntelliJ -> Project -> Java -> Maven
Implementar m√©todos para interface IntelliJ -> Alt Enter (Interface name) ->    o que voc√™ entendeu sobre o padr√£o Strategy; 
    para que ele serve; 
    quais vantagens e desvantagens. Implement Interface();

Return to Interface -> Ctrl+Click (Interface name)

composi√ß√£o: um objeto dentro de outro objeto

estrategista s√≥ relaciona-se com uma classe
strategy : associar o strategista + n associa√ß√µes

m√©todo de conveni√™ncia - como se fosse um atalho

no construtor pode passar atributos ou n√£o
construtor padr√£o n√£o tem par√¢metros, caso seja criado um construtor com par√¢mentros, o outro diexa de existir

CTRL ALT N - Refactor -> Inline -> instancia o objeto no local da chamada // √© seguro se uilizada em apenas um local

//AULA 20 DE MAR√áO
ATIVIDADE 
https://github.com/manoelcampos/padroes-projetos/tree/master/comportamentais/template-method
TOPICO 6
